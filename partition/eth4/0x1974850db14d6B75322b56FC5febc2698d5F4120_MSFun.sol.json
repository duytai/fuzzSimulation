{"name":"MSFun","address":"0x1974850db14d6B75322b56FC5febc2698d5F4120","source":"pragma solidity ^0.4.24;\n/** @title -MSFun- v0.2.4\n * ┌┬┐┌─┐┌─┐┌┬┐   ╦╦ ╦╔═╗╔╦╗  ┌─┐┬─┐┌─┐┌─┐┌─┐┌┐┌┌┬┐┌─┐\n *  │ ├┤ ├─┤│││   ║║ ║╚═╗ ║   ├─┘├┬┘├┤ └─┐├┤ │││ │ └─┐\n *  ┴ └─┘┴ ┴┴ ┴  ╚╝╚═╝╚═╝ ╩   ┴  ┴└─└─┘└─┘└─┘┘└┘ ┴ └─┘\n *                                  _____                      _____\n *                                 (, /     /)       /) /)    (, /      /)          /)\n *          ┌─┐                      /   _ (/_      // //       /  _   // _   __  _(/\n *          ├─┤                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\n *          ┴ ┴                /   /          .-/ _____   (__ /                               \n *                            (__ /          (_/ (, /                                      /)™ \n *                                                 /  __  __ __ __  _   __ __  _  _/_ _  _(/\n * ┌─┐┬─┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\n * ├─┘├┬┘│ │ │││ ││   │                      (__ /              .-/  © Jekyll Island Inc. 2018\n * ┴  ┴└─└─┘─┴┘└─┘└─┘ ┴                                        (_/\n *  _           _             _  _  _  _             _  _  _  _  _                                      \n *=(_) _     _ (_)==========_(_)(_)(_)(_)_==========(_)(_)(_)(_)(_)================================*\n * (_)(_)   (_)(_)         (_)          (_)         (_)       _         _    _  _  _  _                 \n * (_) (_)_(_) (_)         (_)_  _  _  _            (_) _  _ (_)       (_)  (_)(_)(_)(_)_               \n * (_)   (_)   (_)           (_)(_)(_)(_)_          (_)(_)(_)(_)       (_)  (_)        (_)              \n * (_)         (_)  _  _    _           (_)  _  _   (_)      (_)       (_)  (_)        (_)  _  _        \n *=(_)=========(_)=(_)(_)==(_)_  _  _  _(_)=(_)(_)==(_)======(_)_  _  _(_)_ (_)========(_)=(_)(_)==*\n * (_)         (_) (_)(_)    (_)(_)(_)(_)   (_)(_)  (_)        (_)(_)(_) (_)(_)        (_) (_)(_)\n *\n * ╔═╗┌─┐┌┐┌┌┬┐┬─┐┌─┐┌─┐┌┬┐  ╔═╗┌─┐┌┬┐┌─┐ ┌──────────┐\n * ║  │ ││││ │ ├┬┘├─┤│   │   ║  │ │ ││├┤  │ Inventor │\n * ╚═╝└─┘┘└┘ ┴ ┴└─┴ ┴└─┘ ┴   ╚═╝└─┘─┴┘└─┘ └──────────┘\n *  \n *         ┌──────────────────────────────────────────────────────────────────────┐\n *         │ MSFun, is an importable library that gives your contract the ability │\n *         │ add multiSig requirement to functions.                               │\n *         └──────────────────────────────────────────────────────────────────────┘\n *                                ┌────────────────────┐\n *                                │ Setup Instructions │\n *                                └────────────────────┘\n * (Step 1) import the library into your contract\n * \n *    import \"./MSFun.sol\";\n *\n * (Step 2) set up the signature data for msFun\n * \n *     MSFun.Data private msData;\n *                                ┌────────────────────┐\n *                                │ Usage Instructions │\n *                                └────────────────────┘\n * at the beginning of a function\n * \n *     function functionName() \n *     {\n *         if (MSFun.multiSig(msData, required signatures, \"functionName\") == true)\n *         {\n *             MSFun.deleteProposal(msData, \"functionName\");\n * \n *             // put function body here \n *         }\n *     }\n *                           ┌────────────────────────────────┐\n *                           │ Optional Wrappers For TeamJust │\n *                           └────────────────────────────────┘\n * multiSig wrapper function (cuts down on inputs, improves readability)\n * this wrapper is HIGHLY recommended\n * \n *     function multiSig(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamJust.requiredSignatures(), _whatFunction));}\n *     function multiSigDev(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamJust.requiredDevSignatures(), _whatFunction));}\n *\n * wrapper for delete proposal (makes code cleaner)\n *     \n *     function deleteProposal(bytes32 _whatFunction) private {MSFun.deleteProposal(msData, _whatFunction);}\n *                             ┌────────────────────────────┐\n *                             │ Utility & Vanity Functions │\n *                             └────────────────────────────┘\n * delete any proposal is highly recommended.  without it, if an admin calls a multiSig\n * function, with argument inputs that the other admins do not agree upon, the function\n * can never be executed until the undesirable arguments are approved.\n * \n *     function deleteAnyProposal(bytes32 _whatFunction) onlyDevs() public {MSFun.deleteProposal(msData, _whatFunction);}\n * \n * for viewing who has signed a proposal & proposal data\n *     \n *     function checkData(bytes32 _whatFunction) onlyAdmins() public view returns(bytes32, uint256) {return(MSFun.checkMsgData(msData, _whatFunction), MSFun.checkCount(msData, _whatFunction));}\n *\n * lets you check address of up to 3 signers (address)\n * \n *     function checkSignersByAddress(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyAdmins() public view returns(address, address, address) {return(MSFun.checkSigner(msData, _whatFunction, _signerA), MSFun.checkSigner(msData, _whatFunction, _signerB), MSFun.checkSigner(msData, _whatFunction, _signerC));}\n *\n * same as above but will return names in string format.\n *\n *     function checkSignersByName(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyAdmins() public view returns(bytes32, bytes32, bytes32) {return(TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerA)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerB)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerC)));}\n *                             ┌──────────────────────────┐\n *                             │ Functions In Depth Guide │\n *                             └──────────────────────────┘\n * In the following examples, the Data is the proposal set for this library.  And\n * the bytes32 is the name of the function.\n *\n * MSFun.multiSig(Data, uint256, bytes32) - Manages creating/updating multiSig \n *      proposal for the function being called.  The uint256 is the required \n *      number of signatures needed before the multiSig will return true.  \n *      Upon first call, multiSig will create a proposal and store the arguments \n *      passed with the function call as msgData.  Any admins trying to sign the \n *      function call will need to send the same argument values. Once required\n *      number of signatures is reached this will return a bool of true.\n * \n * MSFun.deleteProposal(Data, bytes32) - once multiSig unlocks the function body,\n *      you will want to delete the proposal data.  This does that.\n *\n * MSFun.checkMsgData(Data, bytes32) - checks the message data for any given proposal \n * \n * MSFun.checkCount(Data, bytes32) - checks the number of admins that have signed\n *      the proposal \n * \n * MSFun.checkSigners(data, bytes32, uint256) - checks the address of a given signer.\n *      the uint256, is the log number of the signer (ie 1st signer, 2nd signer)\n */\n\nlibrary MSFun {\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // DATA SETS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // contact data setup\n    struct Data \n    {\n        mapping (bytes32 => ProposalData) proposal_;\n    }\n    struct ProposalData \n    {\n        // a hash of msg.data \n        bytes32 msgData;\n        // number of signers\n        uint256 count;\n        // tracking of wither admins have signed\n        mapping (address => bool) admin;\n        // list of admins who have signed\n        mapping (uint256 => address) log;\n    }\n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // MULTI SIG FUNCTIONS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    function multiSig(Data storage self, uint256 _requiredSignatures, bytes32 _whatFunction)\n        internal\n        returns(bool) \n    {\n        // our proposal key will be a hash of our function name + our contracts address \n        // by adding our contracts address to this, we prevent anyone trying to circumvent\n        // the proposal's security via external calls.\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        \n        // this is just done to make the code more readable.  grabs the signature count\n        uint256 _currentCount = self.proposal_[_whatProposal].count;\n        \n        // store the address of the person sending the function call.  we use msg.sender \n        // here as a layer of security.  in case someone imports our contract and tries to \n        // circumvent function arguments.  still though, our contract that imports this\n        // library and calls multisig, needs to use onlyAdmin modifiers or anyone who\n        // calls the function will be a signer. \n        address _whichAdmin = msg.sender;\n        \n        // prepare our msg data.  by storing this we are able to verify that all admins\n        // are approving the same argument input to be executed for the function.  we hash \n        // it and store in bytes32 so its size is known and comparable\n        bytes32 _msgData = keccak256(msg.data);\n        \n        // check to see if this is a new execution of this proposal or not\n        if (_currentCount == 0)\n        {\n            // if it is, lets record the original signers data\n            self.proposal_[_whatProposal].msgData = _msgData;\n            \n            // record original senders signature\n            self.proposal_[_whatProposal].admin[_whichAdmin] = true;        \n            \n            // update log (used to delete records later, and easy way to view signers)\n            // also useful if the calling function wants to give something to a \n            // specific signer.  \n            self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;  \n            \n            // track number of signatures\n            self.proposal_[_whatProposal].count += 1;  \n            \n            // if we now have enough signatures to execute the function, lets\n            // return a bool of true.  we put this here in case the required signatures\n            // is set to 1.\n            if (self.proposal_[_whatProposal].count == _requiredSignatures) {\n                return(true);\n            }            \n        // if its not the first execution, lets make sure the msgData matches\n        } else if (self.proposal_[_whatProposal].msgData == _msgData) {\n            // msgData is a match\n            // make sure admin hasnt already signed\n            if (self.proposal_[_whatProposal].admin[_whichAdmin] == false) \n            {\n                // record their signature\n                self.proposal_[_whatProposal].admin[_whichAdmin] = true;        \n                \n                // update log (used to delete records later, and easy way to view signers)\n                self.proposal_[_whatProposal].log[_currentCount] = _whichAdmin;  \n                \n                // track number of signatures\n                self.proposal_[_whatProposal].count += 1;  \n            }\n            \n            // if we now have enough signatures to execute the function, lets\n            // return a bool of true.\n            // we put this here for a few reasons.  (1) in normal operation, if \n            // that last recorded signature got us to our required signatures.  we \n            // need to return bool of true.  (2) if we have a situation where the \n            // required number of signatures was adjusted to at or lower than our current \n            // signature count, by putting this here, an admin who has already signed,\n            // can call the function again to make it return a true bool.  but only if\n            // they submit the correct msg data\n            if (self.proposal_[_whatProposal].count == _requiredSignatures) {\n                return(true);\n            }\n        }\n    }\n    \n    \n    // deletes proposal signature data after successfully executing a multiSig function\n    function deleteProposal(Data storage self, bytes32 _whatFunction)\n        internal\n    {\n        //done for readability sake\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        address _whichAdmin;\n        \n        //delete the admins votes & log.   i know for loops are terrible.  but we have to do this \n        //for our data stored in mappings.  simply deleting the proposal itself wouldn't accomplish this.\n        for (uint256 i=0; i < self.proposal_[_whatProposal].count; i++) {\n            _whichAdmin = self.proposal_[_whatProposal].log[i];\n            delete self.proposal_[_whatProposal].admin[_whichAdmin];\n            delete self.proposal_[_whatProposal].log[i];\n        }\n        //delete the rest of the data in the record\n        delete self.proposal_[_whatProposal];\n    }\n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // HELPER FUNCTIONS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    function whatProposal(bytes32 _whatFunction)\n        private\n        view\n        returns(bytes32)\n    {\n        return(keccak256(abi.encodePacked(_whatFunction,this)));\n    }\n    \n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // VANITY FUNCTIONS\n    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    // returns a hashed version of msg.data sent by original signer for any given function\n    function checkMsgData (Data storage self, bytes32 _whatFunction)\n        internal\n        view\n        returns (bytes32 msg_data)\n    {\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        return (self.proposal_[_whatProposal].msgData);\n    }\n    \n    // returns number of signers for any given function\n    function checkCount (Data storage self, bytes32 _whatFunction)\n        internal\n        view\n        returns (uint256 signature_count)\n    {\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        return (self.proposal_[_whatProposal].count);\n    }\n    \n    // returns address of an admin who signed for any given function\n    function checkSigner (Data storage self, bytes32 _whatFunction, uint256 _signer)\n        internal\n        view\n        returns (address signer)\n    {\n        require(_signer > 0, \"MSFun checkSigner failed - 0 not allowed\");\n        bytes32 _whatProposal = whatProposal(_whatFunction);\n        return (self.proposal_[_whatProposal].log[_signer - 1]);\n    }\n}","contract":{"abi":"[]","bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582032e5849ed6b48856a35be97c3830176036bb8fec5892c1a37b0efaab33c08bc20029","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582032e5849ed6b48856a35be97c3830176036bb8fec5892c1a37b0efaab33c08bc20029","srcmap":"8543:7436:0:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"8543:7436:0:-;;;;;;;;"},"ast":{"attributes":{"absolutePath":"/home/worm/Etherscan/downloader/tmp/0x1974850db14d6B75322b56FC5febc2698d5F4120_MSFun.sol","exportedSymbols":{"MSFun":[344]}},"children":[{"attributes":{"literals":["solidity","^","0.4",".24"]},"id":1,"name":"PragmaDirective","src":"0:24:0"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title -MSFun- v0.2.4\n┌┬┐┌─┐┌─┐┌┬┐   ╦╦ ╦╔═╗╔╦╗  ┌─┐┬─┐┌─┐┌─┐┌─┐┌┐┌┌┬┐┌─┐\n │ ├┤ ├─┤│││   ║║ ║╚═╗ ║   ├─┘├┬┘├┤ └─┐├┤ │││ │ └─┐\n ┴ └─┘┴ ┴┴ ┴  ╚╝╚═╝╚═╝ ╩   ┴  ┴└─└─┘└─┘└─┘┘└┘ ┴ └─┘\n                                 _____                      _____\n                                (, /     /)       /) /)    (, /      /)          /)\n         ┌─┐                      /   _ (/_      // //       /  _   // _   __  _(/\n         ├─┤                  ___/___(/_/(__(_/_(/_(/_   ___/__/_)_(/_(_(_/ (_(_(_\n         ┴ ┴                /   /          .-/ _____   (__ /                               \n                           (__ /          (_/ (, /                                      /)™ \n                                                /  __  __ __ __  _   __ __  _  _/_ _  _(/\n┌─┐┬─┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐                          /__/ (_(__(_)/ (_/_)_(_)/ (_(_(_(__(/_(_(_\n├─┘├┬┘│ │ │││ ││   │                      (__ /              .-/  © Jekyll Island Inc. 2018\n┴  ┴└─└─┘─┴┘└─┘└─┘ ┴                                        (_/\n _           _             _  _  _  _             _  _  _  _  _                                      \n(_) _     _ (_)==========_(_)(_)(_)(_)_==========(_)(_)(_)(_)(_)================================*\n(_)(_)   (_)(_)         (_)          (_)         (_)       _         _    _  _  _  _                 \n(_) (_)_(_) (_)         (_)_  _  _  _            (_) _  _ (_)       (_)  (_)(_)(_)(_)_               \n(_)   (_)   (_)           (_)(_)(_)(_)_          (_)(_)(_)(_)       (_)  (_)        (_)              \n(_)         (_)  _  _    _           (_)  _  _   (_)      (_)       (_)  (_)        (_)  _  _        \n(_)=========(_)=(_)(_)==(_)_  _  _  _(_)=(_)(_)==(_)======(_)_  _  _(_)_ (_)========(_)=(_)(_)==*\n(_)         (_) (_)(_)    (_)(_)(_)(_)   (_)(_)  (_)        (_)(_)(_) (_)(_)        (_) (_)(_)\n * ╔═╗┌─┐┌┐┌┌┬┐┬─┐┌─┐┌─┐┌┬┐  ╔═╗┌─┐┌┬┐┌─┐ ┌──────────┐\n║  │ ││││ │ ├┬┘├─┤│   │   ║  │ │ ││├┤  │ Inventor │\n╚═╝└─┘┘└┘ ┴ ┴└─┴ ┴└─┘ ┴   ╚═╝└─┘─┴┘└─┘ └──────────┘\n \n        ┌──────────────────────────────────────────────────────────────────────┐\n        │ MSFun, is an importable library that gives your contract the ability │\n        │ add multiSig requirement to functions.                               │\n        └──────────────────────────────────────────────────────────────────────┘\n                               ┌────────────────────┐\n                               │ Setup Instructions │\n                               └────────────────────┘\n(Step 1) import the library into your contract\n\n *    import \"./MSFun.sol\";\n * (Step 2) set up the signature data for msFun\n\n *     MSFun.Data private msData;\n                               ┌────────────────────┐\n                               │ Usage Instructions │\n                               └────────────────────┘\nat the beginning of a function\n\n *     function functionName() \n    {\n        if (MSFun.multiSig(msData, required signatures, \"functionName\") == true)\n        {\n            MSFun.deleteProposal(msData, \"functionName\");\n\n *             // put function body here \n        }\n    }\n                          ┌────────────────────────────────┐\n                          │ Optional Wrappers For TeamJust │\n                          └────────────────────────────────┘\nmultiSig wrapper function (cuts down on inputs, improves readability)\nthis wrapper is HIGHLY recommended\n\n *     function multiSig(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamJust.requiredSignatures(), _whatFunction));}\n    function multiSigDev(bytes32 _whatFunction) private returns (bool) {return(MSFun.multiSig(msData, TeamJust.requiredDevSignatures(), _whatFunction));}\n * wrapper for delete proposal (makes code cleaner)\n    \n    function deleteProposal(bytes32 _whatFunction) private {MSFun.deleteProposal(msData, _whatFunction);}\n                            ┌────────────────────────────┐\n                            │ Utility & Vanity Functions │\n                            └────────────────────────────┘\ndelete any proposal is highly recommended.  without it, if an admin calls a multiSig\nfunction, with argument inputs that the other admins do not agree upon, the function\ncan never be executed until the undesirable arguments are approved.\n\n *     function deleteAnyProposal(bytes32 _whatFunction) onlyDevs() public {MSFun.deleteProposal(msData, _whatFunction);}\n\n * for viewing who has signed a proposal & proposal data\n    \n    function checkData(bytes32 _whatFunction) onlyAdmins() public view returns(bytes32, uint256) {return(MSFun.checkMsgData(msData, _whatFunction), MSFun.checkCount(msData, _whatFunction));}\n * lets you check address of up to 3 signers (address)\n\n *     function checkSignersByAddress(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyAdmins() public view returns(address, address, address) {return(MSFun.checkSigner(msData, _whatFunction, _signerA), MSFun.checkSigner(msData, _whatFunction, _signerB), MSFun.checkSigner(msData, _whatFunction, _signerC));}\n * same as above but will return names in string format.\n *     function checkSignersByName(bytes32 _whatFunction, uint256 _signerA, uint256 _signerB, uint256 _signerC) onlyAdmins() public view returns(bytes32, bytes32, bytes32) {return(TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerA)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerB)), TeamJust.adminName(MSFun.checkSigner(msData, _whatFunction, _signerC)));}\n                            ┌──────────────────────────┐\n                            │ Functions In Depth Guide │\n                            └──────────────────────────┘\nIn the following examples, the Data is the proposal set for this library.  And\nthe bytes32 is the name of the function.\n * MSFun.multiSig(Data, uint256, bytes32) - Manages creating/updating multiSig \n     proposal for the function being called.  The uint256 is the required \n     number of signatures needed before the multiSig will return true.  \n     Upon first call, multiSig will create a proposal and store the arguments \n     passed with the function call as msgData.  Any admins trying to sign the \n     function call will need to send the same argument values. Once required\n     number of signatures is reached this will return a bool of true.\n\n * MSFun.deleteProposal(Data, bytes32) - once multiSig unlocks the function body,\n     you will want to delete the proposal data.  This does that.\n * MSFun.checkMsgData(Data, bytes32) - checks the message data for any given proposal \n\n * MSFun.checkCount(Data, bytes32) - checks the number of admins that have signed\n     the proposal \n\n * MSFun.checkSigners(data, bytes32, uint256) - checks the address of a given signer.\n     the uint256, is the log number of the signer (ie 1st signer, 2nd signer)","fullyImplemented":true,"linearizedBaseContracts":[344],"name":"MSFun","scope":345},"children":[{"attributes":{"canonicalName":"MSFun.Data","name":"Data","scope":344,"visibility":"public"},"children":[{"attributes":{"constant":false,"name":"proposal_","scope":6,"stateVariable":false,"storageLocation":"default","type":"mapping(bytes32 => struct MSFun.ProposalData)","value":null,"visibility":"internal"},"children":[{"attributes":{"type":"mapping(bytes32 => struct MSFun.ProposalData)"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":2,"name":"ElementaryTypeName","src":"8786:7:0"},{"attributes":{"contractScope":null,"name":"ProposalData","referencedDeclaration":19,"type":"struct MSFun.ProposalData"},"id":3,"name":"UserDefinedTypeName","src":"8797:12:0"}],"id":4,"name":"Mapping","src":"8777:33:0"}],"id":5,"name":"VariableDeclaration","src":"8777:43:0"}],"id":6,"name":"StructDefinition","src":"8750:77:0"},{"attributes":{"canonicalName":"MSFun.ProposalData","name":"ProposalData","scope":344,"visibility":"public"},"children":[{"attributes":{"constant":false,"name":"msgData","scope":19,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":7,"name":"ElementaryTypeName","src":"8898:7:0"}],"id":8,"name":"VariableDeclaration","src":"8898:15:0"},{"attributes":{"constant":false,"name":"count","scope":19,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":9,"name":"ElementaryTypeName","src":"8952:7:0"}],"id":10,"name":"VariableDeclaration","src":"8952:13:0"},{"attributes":{"constant":false,"name":"admin","scope":19,"stateVariable":false,"storageLocation":"default","type":"mapping(address => bool)","value":null,"visibility":"internal"},"children":[{"attributes":{"type":"mapping(address => bool)"},"children":[{"attributes":{"name":"address","type":"address"},"id":11,"name":"ElementaryTypeName","src":"9033:7:0"},{"attributes":{"name":"bool","type":"bool"},"id":12,"name":"ElementaryTypeName","src":"9044:4:0"}],"id":13,"name":"Mapping","src":"9024:25:0"}],"id":14,"name":"VariableDeclaration","src":"9024:31:0"},{"attributes":{"constant":false,"name":"log","scope":19,"stateVariable":false,"storageLocation":"default","type":"mapping(uint256 => address)","value":null,"visibility":"internal"},"children":[{"attributes":{"type":"mapping(uint256 => address)"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":15,"name":"ElementaryTypeName","src":"9116:7:0"},{"attributes":{"name":"address","type":"address"},"id":16,"name":"ElementaryTypeName","src":"9127:7:0"}],"id":17,"name":"Mapping","src":"9107:28:0"}],"id":18,"name":"VariableDeclaration","src":"9107:32:0"}],"id":19,"name":"StructDefinition","src":"8832:314:0"},{"attributes":{"constant":false,"documentation":null,"implemented":true,"isConstructor":false,"modifiers":[null],"name":"multiSig","payable":false,"scope":344,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"self","scope":177,"stateVariable":false,"storageLocation":"storage","type":"struct MSFun.Data","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Data","referencedDeclaration":6,"type":"struct MSFun.Data"},"id":20,"name":"UserDefinedTypeName","src":"9345:4:0"}],"id":21,"name":"VariableDeclaration","src":"9345:17:0"},{"attributes":{"constant":false,"name":"_requiredSignatures","scope":177,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":22,"name":"ElementaryTypeName","src":"9364:7:0"}],"id":23,"name":"VariableDeclaration","src":"9364:27:0"},{"attributes":{"constant":false,"name":"_whatFunction","scope":177,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":24,"name":"ElementaryTypeName","src":"9393:7:0"}],"id":25,"name":"VariableDeclaration","src":"9393:21:0"}],"id":26,"name":"ParameterList","src":"9344:71:0"},{"children":[{"attributes":{"constant":false,"name":"","scope":177,"stateVariable":false,"storageLocation":"default","type":"bool","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bool","type":"bool"},"id":27,"name":"ElementaryTypeName","src":"9449:4:0"}],"id":28,"name":"VariableDeclaration","src":"9449:4:0"}],"id":29,"name":"ParameterList","src":"9448:6:0"},{"children":[{"attributes":{"assignments":[31]},"children":[{"attributes":{"constant":false,"name":"_whatProposal","scope":177,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":30,"name":"ElementaryTypeName","src":"9705:7:0"}],"id":31,"name":"VariableDeclaration","src":"9705:21:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"bytes32","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"overloadedDeclarations":[null],"referencedDeclaration":261,"type":"function (bytes32) view returns (bytes32)","value":"whatProposal"},"id":32,"name":"Identifier","src":"9729:12:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":25,"type":"bytes32","value":"_whatFunction"},"id":33,"name":"Identifier","src":"9742:13:0"}],"id":34,"name":"FunctionCall","src":"9729:27:0"}],"id":35,"name":"VariableDeclarationStatement","src":"9705:51:0"},{"attributes":{"assignments":[37]},"children":[{"attributes":{"constant":false,"name":"_currentCount","scope":177,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":36,"name":"ElementaryTypeName","src":"9863:7:0"}],"id":37,"name":"VariableDeclaration","src":"9863:21:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"count","referencedDeclaration":10,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":38,"name":"Identifier","src":"9887:4:0"}],"id":39,"name":"MemberAccess","src":"9887:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":40,"name":"Identifier","src":"9902:13:0"}],"id":41,"name":"IndexAccess","src":"9887:29:0"}],"id":42,"name":"MemberAccess","src":"9887:35:0"}],"id":43,"name":"VariableDeclarationStatement","src":"9863:59:0"},{"attributes":{"assignments":[45]},"children":[{"attributes":{"constant":false,"name":"_whichAdmin","scope":177,"stateVariable":false,"storageLocation":"default","type":"address","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"address","type":"address"},"id":44,"name":"ElementaryTypeName","src":"10346:7:0"}],"id":45,"name":"VariableDeclaration","src":"10346:19:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"member_name":"sender","referencedDeclaration":null,"type":"address"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":359,"type":"msg","value":"msg"},"id":46,"name":"Identifier","src":"10368:3:0"}],"id":47,"name":"MemberAccess","src":"10368:10:0"}],"id":48,"name":"VariableDeclarationStatement","src":"10346:32:0"},{"attributes":{"assignments":[50]},"children":[{"attributes":{"constant":false,"name":"_msgData","scope":177,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":49,"name":"ElementaryTypeName","src":"10648:7:0"}],"id":50,"name":"VariableDeclaration","src":"10648:16:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"bytes32","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"overloadedDeclarations":[null],"referencedDeclaration":353,"type":"function () pure returns (bytes32)","value":"keccak256"},"id":51,"name":"Identifier","src":"10667:9:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"member_name":"data","referencedDeclaration":null,"type":"bytes calldata"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":359,"type":"msg","value":"msg"},"id":52,"name":"Identifier","src":"10677:3:0"}],"id":53,"name":"MemberAccess","src":"10677:8:0"}],"id":54,"name":"FunctionCall","src":"10667:19:0"}],"id":55,"name":"VariableDeclarationStatement","src":"10648:38:0"},{"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":37,"type":"uint256","value":"_currentCount"},"id":56,"name":"Identifier","src":"10784:13:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":57,"name":"Literal","src":"10801:1:0"}],"id":58,"name":"BinaryOperation","src":"10784:18:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"bytes32"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"member_name":"msgData","referencedDeclaration":8,"type":"bytes32"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":59,"name":"Identifier","src":"10889:4:0"}],"id":62,"name":"MemberAccess","src":"10889:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":61,"name":"Identifier","src":"10904:13:0"}],"id":63,"name":"IndexAccess","src":"10889:29:0"}],"id":64,"name":"MemberAccess","src":"10889:37:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":50,"type":"bytes32","value":"_msgData"},"id":65,"name":"Identifier","src":"10929:8:0"}],"id":66,"name":"Assignment","src":"10889:48:0"}],"id":67,"name":"ExpressionStatement","src":"10889:48:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"admin","referencedDeclaration":14,"type":"mapping(address => bool)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":68,"name":"Identifier","src":"11013:4:0"}],"id":71,"name":"MemberAccess","src":"11013:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":70,"name":"Identifier","src":"11028:13:0"}],"id":72,"name":"IndexAccess","src":"11013:29:0"}],"id":73,"name":"MemberAccess","src":"11013:35:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":45,"type":"address","value":"_whichAdmin"},"id":74,"name":"Identifier","src":"11049:11:0"}],"id":75,"name":"IndexAccess","src":"11013:48:0"},{"attributes":{"argumentTypes":null,"hexvalue":"74727565","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"bool","type":"bool","value":"true"},"id":76,"name":"Literal","src":"11064:4:0"}],"id":77,"name":"Assignment","src":"11013:55:0"}],"id":78,"name":"ExpressionStatement","src":"11013:55:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"address"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"type":"address"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"log","referencedDeclaration":18,"type":"mapping(uint256 => address)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":79,"name":"Identifier","src":"11305:4:0"}],"id":82,"name":"MemberAccess","src":"11305:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":81,"name":"Identifier","src":"11320:13:0"}],"id":83,"name":"IndexAccess","src":"11305:29:0"}],"id":84,"name":"MemberAccess","src":"11305:33:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":37,"type":"uint256","value":"_currentCount"},"id":85,"name":"Identifier","src":"11339:13:0"}],"id":86,"name":"IndexAccess","src":"11305:48:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":45,"type":"address","value":"_whichAdmin"},"id":87,"name":"Identifier","src":"11356:11:0"}],"id":88,"name":"Assignment","src":"11305:62:0"}],"id":89,"name":"ExpressionStatement","src":"11305:62:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"+=","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"member_name":"count","referencedDeclaration":10,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":90,"name":"Identifier","src":"11438:4:0"}],"id":93,"name":"MemberAccess","src":"11438:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":92,"name":"Identifier","src":"11453:13:0"}],"id":94,"name":"IndexAccess","src":"11438:29:0"}],"id":95,"name":"MemberAccess","src":"11438:35:0"},{"attributes":{"argumentTypes":null,"hexvalue":"31","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 1","value":"1"},"id":96,"name":"Literal","src":"11477:1:0"}],"id":97,"name":"Assignment","src":"11438:40:0"}],"id":98,"name":"ExpressionStatement","src":"11438:40:0"},{"attributes":{"falseBody":null},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"count","referencedDeclaration":10,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":99,"name":"Identifier","src":"11705:4:0"}],"id":100,"name":"MemberAccess","src":"11705:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":101,"name":"Identifier","src":"11720:13:0"}],"id":102,"name":"IndexAccess","src":"11705:29:0"}],"id":103,"name":"MemberAccess","src":"11705:35:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":23,"type":"uint256","value":"_requiredSignatures"},"id":104,"name":"Identifier","src":"11744:19:0"}],"id":105,"name":"BinaryOperation","src":"11705:58:0"},{"children":[{"attributes":{"functionReturnParameters":29},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"type":"bool"},"children":[{"attributes":{"argumentTypes":null,"hexvalue":"74727565","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"bool","type":"bool","value":"true"},"id":106,"name":"Literal","src":"11790:4:0"}],"id":107,"name":"TupleExpression","src":"11789:6:0"}],"id":108,"name":"Return","src":"11783:12:0"}],"id":109,"name":"Block","src":"11765:45:0"}],"id":110,"name":"IfStatement","src":"11701:109:0"}],"id":111,"name":"Block","src":"10812:1098:0"},{"attributes":{"falseBody":null},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"msgData","referencedDeclaration":8,"type":"bytes32"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":112,"name":"Identifier","src":"11920:4:0"}],"id":113,"name":"MemberAccess","src":"11920:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":114,"name":"Identifier","src":"11935:13:0"}],"id":115,"name":"IndexAccess","src":"11920:29:0"}],"id":116,"name":"MemberAccess","src":"11920:37:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":50,"type":"bytes32","value":"_msgData"},"id":117,"name":"Identifier","src":"11961:8:0"}],"id":118,"name":"BinaryOperation","src":"11920:49:0"},{"children":[{"attributes":{"falseBody":null},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"admin","referencedDeclaration":14,"type":"mapping(address => bool)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":119,"name":"Identifier","src":"12075:4:0"}],"id":120,"name":"MemberAccess","src":"12075:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":121,"name":"Identifier","src":"12090:13:0"}],"id":122,"name":"IndexAccess","src":"12075:29:0"}],"id":123,"name":"MemberAccess","src":"12075:35:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":45,"type":"address","value":"_whichAdmin"},"id":124,"name":"Identifier","src":"12111:11:0"}],"id":125,"name":"IndexAccess","src":"12075:48:0"},{"attributes":{"argumentTypes":null,"hexvalue":"66616c7365","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"bool","type":"bool","value":"false"},"id":126,"name":"Literal","src":"12127:5:0"}],"id":127,"name":"BinaryOperation","src":"12075:57:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"admin","referencedDeclaration":14,"type":"mapping(address => bool)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":128,"name":"Identifier","src":"12207:4:0"}],"id":131,"name":"MemberAccess","src":"12207:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":130,"name":"Identifier","src":"12222:13:0"}],"id":132,"name":"IndexAccess","src":"12207:29:0"}],"id":133,"name":"MemberAccess","src":"12207:35:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":45,"type":"address","value":"_whichAdmin"},"id":134,"name":"Identifier","src":"12243:11:0"}],"id":135,"name":"IndexAccess","src":"12207:48:0"},{"attributes":{"argumentTypes":null,"hexvalue":"74727565","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"bool","type":"bool","value":"true"},"id":136,"name":"Literal","src":"12258:4:0"}],"id":137,"name":"Assignment","src":"12207:55:0"}],"id":138,"name":"ExpressionStatement","src":"12207:55:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"address"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"type":"address"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"log","referencedDeclaration":18,"type":"mapping(uint256 => address)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":139,"name":"Identifier","src":"12396:4:0"}],"id":142,"name":"MemberAccess","src":"12396:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":141,"name":"Identifier","src":"12411:13:0"}],"id":143,"name":"IndexAccess","src":"12396:29:0"}],"id":144,"name":"MemberAccess","src":"12396:33:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":37,"type":"uint256","value":"_currentCount"},"id":145,"name":"Identifier","src":"12430:13:0"}],"id":146,"name":"IndexAccess","src":"12396:48:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":45,"type":"address","value":"_whichAdmin"},"id":147,"name":"Identifier","src":"12447:11:0"}],"id":148,"name":"Assignment","src":"12396:62:0"}],"id":149,"name":"ExpressionStatement","src":"12396:62:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"+=","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"member_name":"count","referencedDeclaration":10,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":150,"name":"Identifier","src":"12541:4:0"}],"id":153,"name":"MemberAccess","src":"12541:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":152,"name":"Identifier","src":"12556:13:0"}],"id":154,"name":"IndexAccess","src":"12541:29:0"}],"id":155,"name":"MemberAccess","src":"12541:35:0"},{"attributes":{"argumentTypes":null,"hexvalue":"31","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 1","value":"1"},"id":156,"name":"Literal","src":"12580:1:0"}],"id":157,"name":"Assignment","src":"12541:40:0"}],"id":158,"name":"ExpressionStatement","src":"12541:40:0"}],"id":159,"name":"Block","src":"12147:451:0"}],"id":160,"name":"IfStatement","src":"12071:527:0"},{"attributes":{"falseBody":null},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"count","referencedDeclaration":10,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"struct MSFun.Data storage pointer","value":"self"},"id":161,"name":"Identifier","src":"13305:4:0"}],"id":162,"name":"MemberAccess","src":"13305:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"bytes32","value":"_whatProposal"},"id":163,"name":"Identifier","src":"13320:13:0"}],"id":164,"name":"IndexAccess","src":"13305:29:0"}],"id":165,"name":"MemberAccess","src":"13305:35:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":23,"type":"uint256","value":"_requiredSignatures"},"id":166,"name":"Identifier","src":"13344:19:0"}],"id":167,"name":"BinaryOperation","src":"13305:58:0"},{"children":[{"attributes":{"functionReturnParameters":29},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"type":"bool"},"children":[{"attributes":{"argumentTypes":null,"hexvalue":"74727565","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"bool","type":"bool","value":"true"},"id":168,"name":"Literal","src":"13390:4:0"}],"id":169,"name":"TupleExpression","src":"13389:6:0"}],"id":170,"name":"Return","src":"13383:12:0"}],"id":171,"name":"Block","src":"13365:45:0"}],"id":172,"name":"IfStatement","src":"13301:109:0"}],"id":173,"name":"Block","src":"11971:1449:0"}],"id":174,"name":"IfStatement","src":"11916:1504:0"}],"id":175,"name":"IfStatement","src":"10780:2640:0"}],"id":176,"name":"Block","src":"9460:3966:0"}],"id":177,"name":"FunctionDefinition","src":"9327:4099:0"},{"attributes":{"constant":false,"documentation":null,"implemented":true,"isConstructor":false,"modifiers":[null],"name":"deleteProposal","payable":false,"scope":344,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"self","scope":244,"stateVariable":false,"storageLocation":"storage","type":"struct MSFun.Data","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Data","referencedDeclaration":6,"type":"struct MSFun.Data"},"id":178,"name":"UserDefinedTypeName","src":"13553:4:0"}],"id":179,"name":"VariableDeclaration","src":"13553:17:0"},{"attributes":{"constant":false,"name":"_whatFunction","scope":244,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":180,"name":"ElementaryTypeName","src":"13572:7:0"}],"id":181,"name":"VariableDeclaration","src":"13572:21:0"}],"id":182,"name":"ParameterList","src":"13552:42:0"},{"attributes":{"parameters":[null]},"children":[],"id":183,"name":"ParameterList","src":"13616:0:0"},{"children":[{"attributes":{"assignments":[185]},"children":[{"attributes":{"constant":false,"name":"_whatProposal","scope":244,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":184,"name":"ElementaryTypeName","src":"13662:7:0"}],"id":185,"name":"VariableDeclaration","src":"13662:21:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"bytes32","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"overloadedDeclarations":[null],"referencedDeclaration":261,"type":"function (bytes32) view returns (bytes32)","value":"whatProposal"},"id":186,"name":"Identifier","src":"13686:12:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":181,"type":"bytes32","value":"_whatFunction"},"id":187,"name":"Identifier","src":"13699:13:0"}],"id":188,"name":"FunctionCall","src":"13686:27:0"}],"id":189,"name":"VariableDeclarationStatement","src":"13662:51:0"},{"attributes":{"assignments":[null],"initialValue":null},"children":[{"attributes":{"constant":false,"name":"_whichAdmin","scope":244,"stateVariable":false,"storageLocation":"default","type":"address","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"address","type":"address"},"id":190,"name":"ElementaryTypeName","src":"13723:7:0"}],"id":191,"name":"VariableDeclaration","src":"13723:19:0"}],"id":192,"name":"VariableDeclarationStatement","src":"13723:19:0"},{"children":[{"attributes":{"assignments":[194]},"children":[{"attributes":{"constant":false,"name":"i","scope":244,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":193,"name":"ElementaryTypeName","src":"13971:7:0"}],"id":194,"name":"VariableDeclaration","src":"13971:9:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":195,"name":"Literal","src":"13981:1:0"}],"id":196,"name":"VariableDeclarationStatement","src":"13971:11:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"<","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":194,"type":"uint256","value":"i"},"id":197,"name":"Identifier","src":"13984:1:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"count","referencedDeclaration":10,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":179,"type":"struct MSFun.Data storage pointer","value":"self"},"id":198,"name":"Identifier","src":"13988:4:0"}],"id":199,"name":"MemberAccess","src":"13988:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":185,"type":"bytes32","value":"_whatProposal"},"id":200,"name":"Identifier","src":"14003:13:0"}],"id":201,"name":"IndexAccess","src":"13988:29:0"}],"id":202,"name":"MemberAccess","src":"13988:35:0"}],"id":203,"name":"BinaryOperation","src":"13984:39:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"++","prefix":false,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":194,"type":"uint256","value":"i"},"id":204,"name":"Identifier","src":"14025:1:0"}],"id":205,"name":"UnaryOperation","src":"14025:3:0"}],"id":206,"name":"ExpressionStatement","src":"14025:3:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"address"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":191,"type":"address","value":"_whichAdmin"},"id":207,"name":"Identifier","src":"14044:11:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"address"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"log","referencedDeclaration":18,"type":"mapping(uint256 => address)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":179,"type":"struct MSFun.Data storage pointer","value":"self"},"id":208,"name":"Identifier","src":"14058:4:0"}],"id":209,"name":"MemberAccess","src":"14058:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":185,"type":"bytes32","value":"_whatProposal"},"id":210,"name":"Identifier","src":"14073:13:0"}],"id":211,"name":"IndexAccess","src":"14058:29:0"}],"id":212,"name":"MemberAccess","src":"14058:33:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":194,"type":"uint256","value":"i"},"id":213,"name":"Identifier","src":"14092:1:0"}],"id":214,"name":"IndexAccess","src":"14058:36:0"}],"id":215,"name":"Assignment","src":"14044:50:0"}],"id":216,"name":"ExpressionStatement","src":"14044:50:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"delete","prefix":true,"type":"tuple()"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"type":"bool"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"admin","referencedDeclaration":14,"type":"mapping(address => bool)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":179,"type":"struct MSFun.Data storage pointer","value":"self"},"id":217,"name":"Identifier","src":"14115:4:0"}],"id":218,"name":"MemberAccess","src":"14115:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":185,"type":"bytes32","value":"_whatProposal"},"id":219,"name":"Identifier","src":"14130:13:0"}],"id":220,"name":"IndexAccess","src":"14115:29:0"}],"id":221,"name":"MemberAccess","src":"14115:35:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":191,"type":"address","value":"_whichAdmin"},"id":222,"name":"Identifier","src":"14151:11:0"}],"id":223,"name":"IndexAccess","src":"14115:48:0"}],"id":224,"name":"UnaryOperation","src":"14108:55:0"}],"id":225,"name":"ExpressionStatement","src":"14108:55:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"delete","prefix":true,"type":"tuple()"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"type":"address"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"log","referencedDeclaration":18,"type":"mapping(uint256 => address)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":179,"type":"struct MSFun.Data storage pointer","value":"self"},"id":226,"name":"Identifier","src":"14184:4:0"}],"id":227,"name":"MemberAccess","src":"14184:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":185,"type":"bytes32","value":"_whatProposal"},"id":228,"name":"Identifier","src":"14199:13:0"}],"id":229,"name":"IndexAccess","src":"14184:29:0"}],"id":230,"name":"MemberAccess","src":"14184:33:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":194,"type":"uint256","value":"i"},"id":231,"name":"Identifier","src":"14218:1:0"}],"id":232,"name":"IndexAccess","src":"14184:36:0"}],"id":233,"name":"UnaryOperation","src":"14177:43:0"}],"id":234,"name":"ExpressionStatement","src":"14177:43:0"}],"id":235,"name":"Block","src":"14030:201:0"}],"id":236,"name":"ForStatement","src":"13966:265:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"delete","prefix":true,"type":"tuple()"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":179,"type":"struct MSFun.Data storage pointer","value":"self"},"id":237,"name":"Identifier","src":"14299:4:0"}],"id":238,"name":"MemberAccess","src":"14299:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":185,"type":"bytes32","value":"_whatProposal"},"id":239,"name":"Identifier","src":"14314:13:0"}],"id":240,"name":"IndexAccess","src":"14299:29:0"}],"id":241,"name":"UnaryOperation","src":"14292:36:0"}],"id":242,"name":"ExpressionStatement","src":"14292:36:0"}],"id":243,"name":"Block","src":"13616:719:0"}],"id":244,"name":"FunctionDefinition","src":"13529:806:0"},{"attributes":{"constant":true,"documentation":null,"implemented":true,"isConstructor":false,"modifiers":[null],"name":"whatProposal","payable":false,"scope":344,"stateMutability":"view","superFunction":null,"visibility":"private"},"children":[{"children":[{"attributes":{"constant":false,"name":"_whatFunction","scope":261,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":245,"name":"ElementaryTypeName","src":"14536:7:0"}],"id":246,"name":"VariableDeclaration","src":"14536:21:0"}],"id":247,"name":"ParameterList","src":"14535:23:0"},{"children":[{"attributes":{"constant":false,"name":"","scope":261,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":248,"name":"ElementaryTypeName","src":"14604:7:0"}],"id":249,"name":"VariableDeclaration","src":"14604:7:0"}],"id":250,"name":"ParameterList","src":"14603:9:0"},{"children":[{"attributes":{"functionReturnParameters":250},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"type":"bytes32"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"bytes32","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"overloadedDeclarations":[null],"referencedDeclaration":353,"type":"function () pure returns (bytes32)","value":"keccak256"},"id":251,"name":"Identifier","src":"14634:9:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"bytes memory","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_contract$_MSFun_$344","typeString":"library MSFun"}],"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"member_name":"encodePacked","referencedDeclaration":null,"type":"function () pure returns (bytes memory)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":346,"type":"abi","value":"abi"},"id":252,"name":"Identifier","src":"14644:3:0"}],"id":253,"name":"MemberAccess","src":"14644:16:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":246,"type":"bytes32","value":"_whatFunction"},"id":254,"name":"Identifier","src":"14661:13:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":372,"type":"library MSFun","value":"this"},"id":255,"name":"Identifier","src":"14675:4:0"}],"id":256,"name":"FunctionCall","src":"14644:36:0"}],"id":257,"name":"FunctionCall","src":"14634:47:0"}],"id":258,"name":"TupleExpression","src":"14633:49:0"}],"id":259,"name":"Return","src":"14627:55:0"}],"id":260,"name":"Block","src":"14617:72:0"}],"id":261,"name":"FunctionDefinition","src":"14514:175:0"},{"attributes":{"constant":true,"documentation":null,"implemented":true,"isConstructor":false,"modifiers":[null],"name":"checkMsgData","payable":false,"scope":344,"stateMutability":"view","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"self","scope":284,"stateVariable":false,"storageLocation":"storage","type":"struct MSFun.Data","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Data","referencedDeclaration":6,"type":"struct MSFun.Data"},"id":262,"name":"UserDefinedTypeName","src":"14981:4:0"}],"id":263,"name":"VariableDeclaration","src":"14981:17:0"},{"attributes":{"constant":false,"name":"_whatFunction","scope":284,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":264,"name":"ElementaryTypeName","src":"15000:7:0"}],"id":265,"name":"VariableDeclaration","src":"15000:21:0"}],"id":266,"name":"ParameterList","src":"14980:42:0"},{"children":[{"attributes":{"constant":false,"name":"msg_data","scope":284,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":267,"name":"ElementaryTypeName","src":"15070:7:0"}],"id":268,"name":"VariableDeclaration","src":"15070:16:0"}],"id":269,"name":"ParameterList","src":"15069:18:0"},{"children":[{"attributes":{"assignments":[271]},"children":[{"attributes":{"constant":false,"name":"_whatProposal","scope":284,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":270,"name":"ElementaryTypeName","src":"15102:7:0"}],"id":271,"name":"VariableDeclaration","src":"15102:21:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"bytes32","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"overloadedDeclarations":[null],"referencedDeclaration":261,"type":"function (bytes32) view returns (bytes32)","value":"whatProposal"},"id":272,"name":"Identifier","src":"15126:12:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":265,"type":"bytes32","value":"_whatFunction"},"id":273,"name":"Identifier","src":"15139:13:0"}],"id":274,"name":"FunctionCall","src":"15126:27:0"}],"id":275,"name":"VariableDeclarationStatement","src":"15102:51:0"},{"attributes":{"functionReturnParameters":269},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"type":"bytes32"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"msgData","referencedDeclaration":8,"type":"bytes32"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":263,"type":"struct MSFun.Data storage pointer","value":"self"},"id":276,"name":"Identifier","src":"15171:4:0"}],"id":277,"name":"MemberAccess","src":"15171:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":271,"type":"bytes32","value":"_whatProposal"},"id":278,"name":"Identifier","src":"15186:13:0"}],"id":279,"name":"IndexAccess","src":"15171:29:0"}],"id":280,"name":"MemberAccess","src":"15171:37:0"}],"id":281,"name":"TupleExpression","src":"15170:39:0"}],"id":282,"name":"Return","src":"15163:46:0"}],"id":283,"name":"Block","src":"15092:124:0"}],"id":284,"name":"FunctionDefinition","src":"14958:258:0"},{"attributes":{"constant":true,"documentation":null,"implemented":true,"isConstructor":false,"modifiers":[null],"name":"checkCount","payable":false,"scope":344,"stateMutability":"view","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"self","scope":307,"stateVariable":false,"storageLocation":"storage","type":"struct MSFun.Data","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Data","referencedDeclaration":6,"type":"struct MSFun.Data"},"id":285,"name":"UserDefinedTypeName","src":"15303:4:0"}],"id":286,"name":"VariableDeclaration","src":"15303:17:0"},{"attributes":{"constant":false,"name":"_whatFunction","scope":307,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":287,"name":"ElementaryTypeName","src":"15322:7:0"}],"id":288,"name":"VariableDeclaration","src":"15322:21:0"}],"id":289,"name":"ParameterList","src":"15302:42:0"},{"children":[{"attributes":{"constant":false,"name":"signature_count","scope":307,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":290,"name":"ElementaryTypeName","src":"15392:7:0"}],"id":291,"name":"VariableDeclaration","src":"15392:23:0"}],"id":292,"name":"ParameterList","src":"15391:25:0"},{"children":[{"attributes":{"assignments":[294]},"children":[{"attributes":{"constant":false,"name":"_whatProposal","scope":307,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":293,"name":"ElementaryTypeName","src":"15431:7:0"}],"id":294,"name":"VariableDeclaration","src":"15431:21:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"bytes32","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"overloadedDeclarations":[null],"referencedDeclaration":261,"type":"function (bytes32) view returns (bytes32)","value":"whatProposal"},"id":295,"name":"Identifier","src":"15455:12:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":288,"type":"bytes32","value":"_whatFunction"},"id":296,"name":"Identifier","src":"15468:13:0"}],"id":297,"name":"FunctionCall","src":"15455:27:0"}],"id":298,"name":"VariableDeclarationStatement","src":"15431:51:0"},{"attributes":{"functionReturnParameters":292},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"count","referencedDeclaration":10,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":286,"type":"struct MSFun.Data storage pointer","value":"self"},"id":299,"name":"Identifier","src":"15500:4:0"}],"id":300,"name":"MemberAccess","src":"15500:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":294,"type":"bytes32","value":"_whatProposal"},"id":301,"name":"Identifier","src":"15515:13:0"}],"id":302,"name":"IndexAccess","src":"15500:29:0"}],"id":303,"name":"MemberAccess","src":"15500:35:0"}],"id":304,"name":"TupleExpression","src":"15499:37:0"}],"id":305,"name":"Return","src":"15492:44:0"}],"id":306,"name":"Block","src":"15421:122:0"}],"id":307,"name":"FunctionDefinition","src":"15282:261:0"},{"attributes":{"constant":true,"documentation":null,"implemented":true,"isConstructor":false,"modifiers":[null],"name":"checkSigner","payable":false,"scope":344,"stateMutability":"view","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"self","scope":343,"stateVariable":false,"storageLocation":"storage","type":"struct MSFun.Data","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Data","referencedDeclaration":6,"type":"struct MSFun.Data"},"id":308,"name":"UserDefinedTypeName","src":"15644:4:0"}],"id":309,"name":"VariableDeclaration","src":"15644:17:0"},{"attributes":{"constant":false,"name":"_whatFunction","scope":343,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":310,"name":"ElementaryTypeName","src":"15663:7:0"}],"id":311,"name":"VariableDeclaration","src":"15663:21:0"},{"attributes":{"constant":false,"name":"_signer","scope":343,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":312,"name":"ElementaryTypeName","src":"15686:7:0"}],"id":313,"name":"VariableDeclaration","src":"15686:15:0"}],"id":314,"name":"ParameterList","src":"15643:59:0"},{"children":[{"attributes":{"constant":false,"name":"signer","scope":343,"stateVariable":false,"storageLocation":"default","type":"address","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"address","type":"address"},"id":315,"name":"ElementaryTypeName","src":"15750:7:0"}],"id":316,"name":"VariableDeclaration","src":"15750:14:0"}],"id":317,"name":"ParameterList","src":"15749:16:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_099e5489ee085929a343c79ecccda5093f974de4c3766a4aa3dba52ad255ce25","typeString":"literal_string \"MSFun checkSigner failed - 0 not allowed\""}],"overloadedDeclarations":[362,363],"referencedDeclaration":363,"type":"function (bool,string memory) pure","value":"require"},"id":318,"name":"Identifier","src":"15780:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":">","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":313,"type":"uint256","value":"_signer"},"id":319,"name":"Identifier","src":"15788:7:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":320,"name":"Literal","src":"15798:1:0"}],"id":321,"name":"BinaryOperation","src":"15788:11:0"},{"attributes":{"argumentTypes":null,"hexvalue":"4d5346756e20636865636b5369676e6572206661696c6564202d2030206e6f7420616c6c6f776564","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"MSFun checkSigner failed - 0 not allowed\"","value":"MSFun checkSigner failed - 0 not allowed"},"id":322,"name":"Literal","src":"15801:42:0"}],"id":323,"name":"FunctionCall","src":"15780:64:0"}],"id":324,"name":"ExpressionStatement","src":"15780:64:0"},{"attributes":{"assignments":[326]},"children":[{"attributes":{"constant":false,"name":"_whatProposal","scope":343,"stateVariable":false,"storageLocation":"default","type":"bytes32","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes32","type":"bytes32"},"id":325,"name":"ElementaryTypeName","src":"15854:7:0"}],"id":326,"name":"VariableDeclaration","src":"15854:21:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"bytes32","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"overloadedDeclarations":[null],"referencedDeclaration":261,"type":"function (bytes32) view returns (bytes32)","value":"whatProposal"},"id":327,"name":"Identifier","src":"15878:12:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":311,"type":"bytes32","value":"_whatFunction"},"id":328,"name":"Identifier","src":"15891:13:0"}],"id":329,"name":"FunctionCall","src":"15878:27:0"}],"id":330,"name":"VariableDeclarationStatement","src":"15854:51:0"},{"attributes":{"functionReturnParameters":317},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"type":"address"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"address"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"log","referencedDeclaration":18,"type":"mapping(uint256 => address)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"type":"struct MSFun.ProposalData storage ref"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"proposal_","referencedDeclaration":5,"type":"mapping(bytes32 => struct MSFun.ProposalData storage ref)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":309,"type":"struct MSFun.Data storage pointer","value":"self"},"id":331,"name":"Identifier","src":"15923:4:0"}],"id":332,"name":"MemberAccess","src":"15923:14:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":326,"type":"bytes32","value":"_whatProposal"},"id":333,"name":"Identifier","src":"15938:13:0"}],"id":334,"name":"IndexAccess","src":"15923:29:0"}],"id":335,"name":"MemberAccess","src":"15923:33:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"-","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":313,"type":"uint256","value":"_signer"},"id":336,"name":"Identifier","src":"15957:7:0"},{"attributes":{"argumentTypes":null,"hexvalue":"31","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 1","value":"1"},"id":337,"name":"Literal","src":"15967:1:0"}],"id":338,"name":"BinaryOperation","src":"15957:11:0"}],"id":339,"name":"IndexAccess","src":"15923:46:0"}],"id":340,"name":"TupleExpression","src":"15922:48:0"}],"id":341,"name":"Return","src":"15915:55:0"}],"id":342,"name":"Block","src":"15770:207:0"}],"id":343,"name":"FunctionDefinition","src":"15622:355:0"}],"id":344,"name":"ContractDefinition","src":"8543:7436:0"}],"id":345,"name":"SourceUnit","src":"0:15979:0"}}